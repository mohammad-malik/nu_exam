a5380ee
Asymptotic Analysis

2efcde9
Which of the following is an example of constant time complexity?
option: O(n)
option: O(n log n)
option dabfac4: O(1) 
option: O(2^n)

b94d27b
Big O notation is used to describe the lower bound of an algorithm's time complexity.
option: True
option dabfac4: False

2efcde9
Which of the following is an example of logarithmic time complexity?
option dabfac4: O(log n) 
option: O(n)
option: O(n log n)
option: O(n^2)

88f7ace
Explain the difference between the Big O, Big Omega, and Big Theta notations and how they are used to describe the time complexity of an algorithm. Provide an example of an algorithm and show how you would analyze its time complexity using these notations.

2efcde9
What is the time complexity of a linear search algorithm?
option: O(1)
option: O(log n)
option dabfac4: O(n)
option: O(n^2)

a5380ee
Sorting Algorithms

2efcde9
Which of the following is a comparison-based sorting algorithm?
option: Counting Sort
option: Radix Sort
option dabfac4: Quick Sort
option: Bucket Sort

2efcde9
Which of the following is not a stable sorting algorithm?
option: Bubble Sort
option: Insertion Sort
option dabfac4: Quick Sort 
option: Selection Sort

b94d27b
Merge Sort has a worst-case time complexity of O(n^2).
option: True
option dabfac4: False

2efcde9
Which sorting algorithm has the best worst-case time complexity?
option: Bubble Sort
option: Quick Sort
option: Merge Sort
option dabfac4: Heap Sort

2efcde9
What is the time complexity of Quick Sort in the worst case?
option: O(n)
option: O(n log n)
option dabfac4: O(n^2)
option: O(2^n)

a5380ee
Dynamic Programming

2efcde9
Which of the following is a characteristic of a problem that can be solved using dynamic programming?
option dabfac4: The problem has optimal substructure and overlapping subproblems
option: The problem has optimal substructure but no overlapping subproblems
option: The problem has no optimal substructure but has overlapping subproblems
option: The problem has neither optimal substructure nor overlapping subproblems

88f7ace
Consider a problem that can be solved using both dynamic programming and recursion. Compare and contrast the advantages and disadvantages of each approach, including their time and space complexity, ease of implementation, and any other relevant factors. Provide an example of a problem that can be solved using both approaches and explain which one you would choose and why.

2efcde9
In dynamic programming, what is memoization?
option: A technique for solving problems by breaking them down into smaller subproblems and solving those subproblems recursively
option: A technique for solving problems by solving them in reverse order
option: A technique for storing the results
option dabfac4: A technique for solving problems by storing the results of subproblems so that they can be reused

b94d27b
Dynamic programming can only be used to solve optimization problems.
option: True
option dabfac4: False

2efcde9
What is the time complexity of the Fibonacci sequence algorithm implemented using dynamic programming?
option: O(2^n)
option: O(n log n)
option dabfac4: O(n)
option: O(log n)

a5380ee
Greedy Algorithms

2efcde9
Which of the following is a characteristic of a problem that can be solved using a greedy algorithm?
option: The problem has optimal substructure but no overlapping subproblems
option: The problem has overlapping subproblems but no optimal substructure
option dabfac4: The problem has both optimal substructure and overlapping subproblems
option: The problem has neither optimal substructure nor overlapping subproblems

b94d27b
A greedy algorithm always finds the globally optimal solution for a problem.
option: True
option dabfac4: False

2efcde9
Which of the following is a popular greedy algorithm for solving the Knapsack problem?
option: Dijkstra's Algorithm
option: Floyd-Warshall Algorithm
option: Bellman-Ford Algorithm
option dabfac4: Fractional Knapsack Algorithm

2efcde9
Which of the following is a popular greedy algorithm for solving the Minimum Spanning Tree (MST) problem?
option: Kruskal's Algorithm
option dabfac4: Prim's Algorithm
option: Dijkstra's Algorithm
option: Bellman-Ford Algorithm

88f7ace
Consider the activity selection problem where you are given a set of activities with start and finish times, and you want to select the maximum number of non-overlapping activities. Explain how you can solve this problem using a greedy algorithm, and provide an example to illustrate your explanation. Compare and contrast your greedy algorithm with a brute-force approach.

a5380ee
Divide and Conquer

2efcde9
Which of the following is a characteristic of a problem that can be solved using divide and conquer?
option: The problem has optimal substructure and overlapping subproblems
option: The problem has overlapping subproblems but no optimal substructure
option: The problem has both optimal substructure and overlapping subproblems
option dabfac4: The problem can be broken down into smaller subproblems that are identical to the original problem but smaller in size

b94d27b
Merge Sort is an example of a divide and conquer algorithm.
option dabfac4: True
option: False

2efcde9
Which of the following statements is true about the MergeSort algorithm?
option: It has a worst-case time complexity of O(n^2).
option dabfac4: It uses a divide and conquer strategy to sort elements.
option: It is an in-place sorting algorithm.
option: It is more efficient than the QuickSort algorithm for small inputs.

b94d27b
The Strassen's algorithm for matrix multiplication is always faster than the naive algorithm for matrices of any size.
option: True
option dabfac4: False 

88f7ace
Consider the closest pair of points problem where you are given a set of points in a plane, and you want to find the pair of points that are closest to each other. Explain how you can solve this problem using a divide and conquer algorithm, and provide an example to illustrate your explanation. Compare and contrast your divide and conquer algorithm with a brute-force approach.
